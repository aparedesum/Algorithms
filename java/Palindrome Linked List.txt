// https://leetcode.com/problems/palindrome-linked-list/#/description

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        
        if (fast != null) slow = slow.next;
        
        slow = inverseList(slow, null);
        fast = head;
        
        while (slow != null) {
            if (fast.val != slow.val) {
                return false;
            }
            fast = fast.next;
            slow = slow.next;
        }
        return true;
    }
    
    public ListNode inverseList(ListNode head, ListNode newHead){
        if(head == null) return newHead;
        ListNode tmp = head;
        head = head.next;
        tmp.next = newHead;
        return inverseList(head, tmp);
    }
}