// https://leetcode.com/problems/relative-ranks/#/description

import java.util.HashMap;
import java.util.Map;

public class RelativeRanks {
	
	public static void main(String[] args) {
		int [] nums = {10,3,8,9,4};
		for(String x : findRelativeRanks(nums)) System.out.println(x);
 	}
	
	public static String[] findRelativeRanks(int[] nums) {
		int n = nums.length;
		int numsClone[] = nums.clone();
		
		//Heap sort technique O(nlogn)
		for (int k = n / 2; k >= 0; k--) {
			sink(numsClone, k, n);
		}

		while (n > 0) {
			n--;
			int tmp = numsClone[0];
			numsClone[0] = numsClone[n];
			numsClone[n] = tmp;
			sink(numsClone, 0, n);
		}

		n = numsClone.length;

		//Change last with first O(n)		
		for(int i = 0; i <n/2; i++){
			int tmp = numsClone[i];
			numsClone[i]=numsClone[n-i-1];
			numsClone[n-i-1]=tmp;
		}
		
		//save order values in map O(n)
		Map<Integer, Integer> keys = new HashMap<>();
		
		for(int i = 0; i <n; i++) keys.put(numsClone[i], i);
		
		//Constructing the string array O(n)
		String[] orders = new String[n];

		for (int i = 0; i < n; i++) {
			int value = keys.get(nums[i]);
			if (value == 0) orders[i] = "Gold Medal";
			else if (value == 1) orders[i] = "Silver Medal";
			else if (value == 2) orders[i] = "Bronze Medal";
			else orders[i] = String.valueOf(value + 1);
		}
		
		return orders;
	}

	private static void sink(int[] nums, int k, int n) {
		while (2 * k < n) {
			int j = 2 * k;
			if (j < n - 1 && Integer.compare(nums[j], nums[j + 1]) < 0) j++;
			if (Integer.compare(nums[k], nums[j]) >= 0) break;
			int tmp = nums[k];
			nums[k] = nums[j];
			nums[j] = tmp;
			k = j;
		}
	}
}
